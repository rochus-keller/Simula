#ifndef __SIM_TOKENTYPE__
#define __SIM_TOKENTYPE__
// This file was automatically generated by EbnfStudio; don't modify it!


#include <QByteArray>

namespace Sim {
	enum TokenType {
		Tok_Invalid = 0,

		TT_Literals,
		Tok_Bang,
		Tok_BangEq,
		Tok_Percent,
		Tok_Amp,
		Tok_Lpar,
		Tok_Rpar,
		Tok_Star,
		Tok_2Star,
		Tok_Plus,
		Tok_Comma,
		Tok_Minus,
		Tok_MinusGt,
		Tok_Dot,
		Tok_Slash,
		Tok_2Slash,
		Tok_Colon,
		Tok_ColonMinus,
		Tok_ColonEq,
		Tok_Semi,
		Tok_Lt,
		Tok_Leq,
		Tok_LtGt,
		Tok_Eq,
		Tok_EqSlashEq,
		Tok_2Eq,
		Tok_Gt,
		Tok_Geq,
		Tok_Lbrack,
		Tok_Rbrack,
		Tok_Hat,
		Tok_HatEq,
		Tok_Bar,
		Tok_Unot,
		Tok_Umul,
		Tok_Udiv,
		Tok_Uexp,
		Tok_Uand,
		Tok_Uor,
		Tok_Uneq,
		Tok_Ueq,
		Tok_Uleq,
		Tok_Ugeq,
		Tok_Uimpl,

		TT_Keywords,
		Tok_ACTIVATE,
		Tok_AFTER,
		Tok_AND,
		Tok_ARRAY,
		Tok_AT,
		Tok_BEFORE,
		Tok_BEGIN,
		Tok_BOOLEAN,
		Tok_CHARACTER,
		Tok_CLASS,
		Tok_COMMENT,
		Tok_DELAY,
		Tok_DIV,
		Tok_DO,
		Tok_ELSE,
		Tok_END,
		Tok_EQ,
		Tok_EQUAL,
		Tok_EQUIV,
		Tok_EQV,
		Tok_EXTERNAL,
		Tok_FALSE,
		Tok_FOR,
		Tok_GE,
		Tok_GO,
		Tok_GOTO,
		Tok_GREATER,
		Tok_GT,
		Tok_IF,
		Tok_IMP,
		Tok_IMPL,
		Tok_IN,
		Tok_INNER,
		Tok_INSPECT,
		Tok_INTEGER,
		Tok_IS,
		Tok_LABEL,
		Tok_LE,
		Tok_LESS,
		Tok_LONG,
		Tok_LT,
		Tok_MOD,
		Tok_NAME,
		Tok_NE,
		Tok_NEW,
		Tok_NONE,
		Tok_NOT,
		Tok_NOTEQUAL,
		Tok_NOTEXT,
		Tok_NOTGREATER,
		Tok_NOTLESS,
		Tok_OR,
		Tok_OTHERWISE,
		Tok_POWER,
		Tok_PRIOR,
		Tok_PROCEDURE,
		Tok_QUA,
		Tok_REACTIVATE,
		Tok_REAL,
		Tok_REF,
		Tok_SHORT,
		Tok_STEP,
		Tok_SWITCH,
		Tok_TEXT,
		Tok_THEN,
		Tok_THIS,
		Tok_TO,
		Tok_TRUE,
		Tok_UNTIL,
		Tok_VALUE,
		Tok_VIRTUAL,
		Tok_WHEN,
		Tok_WHILE,

		TT_Specials,
		Tok_decimal_number,
		Tok_unsigned_integer,
		Tok_string,
		Tok_character,
		Tok_identifier,
		Tok_Comment,
		Tok_Eof,

		TT_MaxToken,

		TT_Max
	};

	const char* tokenTypeString( int ); // Pretty with punctuation chars
	const char* tokenTypeName( int ); // Just the names without punctuation chars
	bool tokenTypeIsLiteral( int );
	bool tokenTypeIsKeyword( int );
	bool tokenTypeIsSpecial( int );
	TokenType tokenTypeFromString( const QByteArray& str, int* pos = 0 );
}
#endif // __SIM_TOKENTYPE__
