// This file was automatically generated by EbnfStudio; don't modify it!
#include "SimSynTree.h"
using namespace Sim;

SynTree::SynTree(quint16 r, const Token& t ):d_tok(r){
	d_tok.d_lineNr = t.d_lineNr;
	d_tok.d_colNr = t.d_colNr;
	d_tok.d_sourcePath = t.d_sourcePath;
}

const char* SynTree::rToStr( quint16 r ) {
	switch(r) {
		case R_Common_Base_conditional_statement: return "Common_Base_conditional_statement";
		case R_Common_Base_statement: return "Common_Base_statement";
		case R_activation_clause: return "activation_clause";
		case R_activation_statement: return "activation_statement";
		case R_activator: return "activator";
		case R_actual_parameter: return "actual_parameter";
		case R_actual_parameter_list: return "actual_parameter_list";
		case R_actual_parameter_part: return "actual_parameter_part";
		case R_adding_operator: return "adding_operator";
		case R_and_sym_: return "and_sym_";
		case R_array_declaration: return "array_declaration";
		case R_array_list: return "array_list";
		case R_array_segment: return "array_segment";
		case R_attribute_identifier: return "attribute_identifier";
		case R_block: return "block";
		case R_block_prefix: return "block_prefix";
		case R_bound_pair: return "bound_pair";
		case R_bound_pair_list: return "bound_pair_list";
		case R_class_body: return "class_body";
		case R_class_declaration: return "class_declaration";
		case R_class_identifier: return "class_identifier";
		case R_comment_: return "comment";
		case R_compound_tail: return "compound_tail";
		case R_connection_part: return "connection_part";
		case R_connection_statement: return "connection_statement";
		case R_declaration: return "declaration";
		case R_equiv_sym_: return "equiv_sym_";
		case R_equivalence_: return "equivalence_";
		case R_expression: return "expression";
		case R_external_declaration: return "external_declaration";
		case R_external_head: return "external_head";
		case R_external_identifier: return "external_identifier";
		case R_external_item: return "external_item";
		case R_external_list: return "external_list";
		case R_factor: return "factor";
		case R_final_operations_: return "final_operations";
		case R_for_clause: return "for_clause";
		case R_for_right_part: return "for_right_part";
		case R_for_statement: return "for_statement";
		case R_formal_parameter: return "formal_parameter";
		case R_formal_parameter_list: return "formal_parameter_list";
		case R_formal_parameter_part: return "formal_parameter_part";
		case R_go_to_statement: return "go_to_statement";
		case R_identifier_list: return "identifier_list";
		case R_if_clause: return "if_clause";
		case R_impl_sym_: return "impl_sym_";
		case R_implication: return "implication";
		case R_initial_operations_: return "initial_operations";
		case R_label: return "label";
		case R_local_object: return "local_object";
		case R_logical_value: return "logical_value";
		case R_lower_bound: return "lower_bound";
		case R_main_block: return "main_block";
		case R_main_part: return "main_part";
		case R_mode_part: return "mode_part";
		case R_module: return "module";
		case R_module_body_: return "module_body_";
		case R_multiplying_operator: return "multiplying_operator";
		case R_name_part: return "name_part";
		case R_not_sym_: return "not_sym_";
		case R_object_for_list: return "object_for_list";
		case R_object_for_list_element: return "object_for_list_element";
		case R_object_generator: return "object_generator";
		case R_object_reference: return "object_reference";
		case R_or_sym_: return "or_sym_";
		case R_otherwise_clause: return "otherwise_clause";
		case R_parameter_delimiter: return "parameter_delimiter";
		case R_power_sym_: return "power_sym_";
		case R_prefix: return "prefix";
		case R_primary: return "primary";
		case R_procedure_body: return "procedure_body";
		case R_procedure_declaration: return "procedure_declaration";
		case R_procedure_heading: return "procedure_heading";
		case R_procedure_identifier: return "procedure_identifier";
		case R_procedure_specification: return "procedure_specification";
		case R_program: return "program";
		case R_protection_part: return "protection_part";
		case R_protection_specification: return "protection_specification";
		case R_qualification: return "qualification";
		case R_qualified_: return "qualified_";
		case R_quaternary_: return "quaternary_";
		case R_reference_type: return "reference_type";
		case R_relation_: return "relation_";
		case R_relational_operator: return "relational_operator";
		case R_scheduling_clause: return "scheduling_clause";
		case R_secondary: return "secondary";
		case R_selector_: return "selector_";
		case R_simple_expression_: return "simple_expression_";
		case R_simple_timing_clause: return "simple_timing_clause";
		case R_simple_variable: return "simple_variable";
		case R_specification_part: return "specification_part";
		case R_specifier: return "specifier";
		case R_split_body_: return "split_body";
		case R_statement: return "statement";
		case R_string_: return "string_";
		case R_subscript_expression: return "subscript_expression";
		case R_subscript_list: return "subscript_list";
		case R_switch_declaration: return "switch_declaration";
		case R_switch_identifier: return "switch_identifier";
		case R_switch_list: return "switch_list";
		case R_term: return "term";
		case R_tertiary_: return "tertiary_";
		case R_timing_clause: return "timing_clause";
		case R_type: return "type";
		case R_type_declaration: return "type_declaration";
		case R_type_list: return "type_list";
		case R_type_list_element: return "type_list_element";
		case R_unconditional_statement: return "unconditional_statement";
		case R_unlabelled_basic_statement: return "unlabelled_basic_statement";
		case R_unsigned_number: return "unsigned_number";
		case R_upper_bound: return "upper_bound";
		case R_value_for_list: return "value_for_list";
		case R_value_for_list_element: return "value_for_list_element";
		case R_value_part: return "value_part";
		case R_value_type: return "value_type";
		case R_variable_identifier: return "variable_identifier";
		case R_virtual_part: return "virtual_part";
		case R_virtual_spec: return "virtual_spec";
		case R_when_clause: return "when_clause";
		case R_while_statement: return "while_statement";
	default: if(r<R_First) return tokenTypeName(r); else return "";
}
}
